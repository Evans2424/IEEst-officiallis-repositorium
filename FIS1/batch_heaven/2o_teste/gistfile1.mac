load("basic")$
load("nchrpl")$
fpprintprec: 4$

IsImag(x) := if (imagpart(x) # 0) then true else false$
IsTrueImag(x) := if (IsImag(x) and realpart(x) = 0) then true else false$

IsDoubleEigen(x) := if (length(x[1]) = 1) then true else false$ /* x √© uma lista retornada por eigenvalues */

SistAnalyse(f, vars) := block(
    [
        j: jacobian(f, vars)
    ],
    
    /* - Se f(x=0) != 0 e g(y=0) != 0 ent√£o o sist. n√£o representa 2 esp√©cias */
    if (ev(f[1], vars[1] = 0) # 0 and ev(f[2], vars[2] = 0) # 0) then
        print("sistema n„o representa duas espÈcies")
    else
        print("sistema representa duas espÈcies"),
    
    /* - Se Tr(J) for diff 0 ent„o o sistema È n„o conservativo (else conservativo) */
    
    if (mattrace(j) # 0) then
        print("sistema n„o conservativo")
    else
        print("sistema conservativo"),
    
    assume(vars[1] > 0),
    assume(vars[2] > 0),
    
    print("taxa de crescimento de", vars[1], ":", f[1]/vars[1]),
    print("taxa de crescimento de", vars[2], ":", f[2]/vars[2]),
    
    if (j[1][2] > 0 and j[2][1] > 0) then
        print("sistema com cooperaÁ„oo"),
    if (j[1][2] < 0 and j[2][1] < 0) then
        print("sistema com competiÁ„o"),
    if (j[1][2] > 0 and j[2][1] < 0) then
        print("sistema predador-presa,", vars[1], "predador"),
    if (j[1][2] < 0 and j[2][1] > 0) then
        print("sistema predador-presa,", vars[1], "presa"),
    
    j
)$

EquilPoints(f, vars) := block(
    [
        j: jacobian(f, vars), /* matrix jacobiana */
        equil: solve(f, vars), /* lista de pontos de equilibrio */
        w: makelist(), /* lista que ir· conter as matrizes de cada ponto */
        e: makelist() /* list que ira conter eigenvalues de cada ponto */
    ],
    for i:1 thru length(equil) do w:push(subst(equil[i], j), w), /* preenche w com substituiÁıes */
    for i:1 thru length(w) do e:push(eigenvalues(w[i]), e), /* preence e com eigenvectors */
    
    for i:1 thru length(e) do block(
        [x: e[i]], /* eigenvalue actual */
        if (IsImag(x[1][1])) then                                              /* centros e focos */
            if (IsTrueImag(x[1][1])) then                                      /* centro */
                print("ponto", i, "(", equil[i], ")", ":", "centro, est√°vel")
            else
                if (realpart(x[1][1]) > 0) then                                /* focos */
                    print ("ponto", i, "(", equil[i], ")", ":", "foco repulsivo, inst√°vel")
                else
                    print ("ponto", i, "(", equil[i], ")", ":", "foco atractivo, est√°vel")
        else                                                                   /* pontos e n√≥s */
            if (IsDoubleEigen(x)) then                                         /* n√≥s impr√≥prios */
                if (x[1][1] > 0) then
                    print ("ponto", i, "(", equil[i], ")", ":", "n√≥ impr√≥prio repulsivo, inst·vel")
                else
                    print ("ponto", i, "(", equil[i], ")", ":", "n√≥ imprÛprio atractivo, est·vel")
            else                                                               /* ponto de sela ou n√≥s prÛprios */
                if (x[1][1] > 0) then
                    if (x[1][2] > 0) then
                        print ("ponto", i, "(", equil[i], ")", ":", "n„o repulsivo, inst·vel")
                    else
                        print ("ponto", i, "(", equil[i], ")", ":", "ponto de sela, inst·vel")
                else
                    if (x[1][2] > 0) then
                        print ("ponto", i, "(", equil[i], ")", ":", "ponto de sela, est·vel")
                    else
                        print ("ponto", i, "(", equil[i], ")", ":", "n√≥ atractivo, est√°vel")
    ), j
)$


/*
Tests:
EquilPoints([4-x1^2-4*x2^2, x2^2-x1^2+1], [x1, x2]);
EquilPoints([x-y, x+3*y], [x, y]);
*/